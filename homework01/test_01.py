import copy
import unittest
import testlib
import json
import random
from ddt import file_data, ddt, data, unpack

import program01 as program

@ddt
class Test(testlib.TestCase):

    # TODO:
    #   casi estremi:
    #       tutti voti uguali
    #       tutti voti diversi
    #   casi di dimensione variabile
    #       numero di valori generati   (Kmila valori)
    #       numero di valori generabili (valori da X a Y)

    def do_test(self, voti, expected):
        '''Implementazione del test
            - voti:     lista di voti
            - expected: lista risultante attesa
        '''
        voti_bis = copy.deepcopy(voti)
        result   = program.es1(voti_bis)
        self.check(type(result), list,     None, "il risultato non e' una lista")
        self.check(result,       expected, None, "il risultato non e' corretto")
        self.check(voti_bis,     voti,     None, "la lista dei voti non va modificata")
        return 1

    @file_data('test_01.json')
    def test_prende_i_dati_dal_file_json(self, voti, expected):
        '''Versione che prende i dati dal file Json'''
        return self.do_test(voti, expected)

    # esempio di test che elenca i dati nel decoratore
    @data((1000,   10, # 1000 voti casuali tra 1 e 10
            [1000, 1000, 895, 775, 683, 589, 487, 389, 286, 179, 92]), # risultato
          (10000, 100, # 10000 voti casuali tra 1 e 100
            [10000, 10000, 9893, 9797, 9691, 9593, 9484, 9373, 9277, 9191, 9098, 9022, 8911, 8818, 8710, 8597, 8483, 8397, 8286, 8178, 8075, 7965, 7858, 7763, 7667, 7577, 7479, 7369, 7253, 7165, 7064, 6961, 6871, 6774, 6667, 6561, 6461, 6374, 6285, 6175, 6073, 5962, 5853, 5767, 5645, 5533, 5438, 5323, 5234, 5145, 5048, 4939, 4836, 4737, 4634, 4522, 4425, 4325, 4232, 4131, 4027, 3942, 3847, 3749, 3649, 3549, 3460, 3372, 3273, 3177, 3082, 2992, 2908, 2811, 2702, 2616, 2524, 2422, 2324, 2199, 2091, 1994, 1878, 1777, 1686, 1585, 1478, 1385, 1272, 1180, 1103, 998, 880, 781, 687, 588, 476, 388, 300, 202, 103]),
          (100000,  1, # 100000 volte 1
            [100000, 100000]),
         )
    @unpack
    def test_N_voti_casuali_tra_1_e_K(self, N, K, expected):
        '''Genera N voti casuali tra 1 e K'''
        random.seed(0)
        voti = [ random.randint(1,K) for _ in range(N) ]
        self.do_test(voti, expected)

    @data(1000,               # voti=range(1,1001)
          10000)             # voti=range(1,10001)
    def test_sequenza_di_N_valori_consecutivi(self, N):
        print(N)
        '''Genera N voti da 1 a N'''
        voti = list(range(1,N+1))
        expected = [N] + list(reversed(voti))
        self.do_test(voti, expected)

    @data((300,800),          # voti=[800, 300]
          (2000, 50000),      # voti=[50000, 2000]
         )
    @unpack
    def test_2_valori_soli_grandi(self, low, high):
        '''I voti sono una semplice coppia'''
        voti = [high, low]
        expected = [2]*(low+1)
        expected += [1]*(high-low)
        self.do_test(voti, expected)

    def test_segreto_random_1000(self):
        '''1000 voti a caso tra 50 e 80'''
        voti = [52, 57, 79, 55, 51, 69, 79, 51, 63, 71, 69, 64, 53, 66, 69, 59, 75, 69, 71, 77, 61, 59, 63, 79, 72, 56,
                55, 77, 60, 72, 79, 72, 70, 66, 71, 59, 71, 55, 54, 50, 73, 80, 63, 61, 51, 77, 66, 77, 61, 78, 70, 65,
                80, 62, 50, 61, 60, 54, 72, 77, 79, 52, 80, 73, 61, 65, 79, 65, 71, 60, 71, 59, 66, 60, 75, 69, 62, 72,
                77, 80, 54, 80, 65, 58, 58, 70, 68, 69, 58, 54, 61, 76, 59, 54, 50, 65, 60, 78, 51, 65, 76, 69, 71, 54,
                74, 74, 73, 56, 59, 69, 50, 64, 66, 75, 57, 76, 50, 57, 65, 56, 78, 50, 63, 58, 80, 64, 73, 66, 51, 64,
                54, 68, 56, 50, 74, 79, 55, 62, 74, 75, 56, 60, 57, 80, 57, 72, 62, 64, 75, 67, 54, 58, 54, 59, 73, 51,
                72, 74, 73, 61, 60, 71, 63, 77, 79, 74, 75, 66, 74, 57, 55, 55, 71, 78, 59, 72, 75, 70, 77, 65, 67, 51,
                72, 75, 60, 70, 73, 70, 53, 73, 57, 56, 74, 50, 75, 65, 77, 71, 68, 80, 72, 78, 70, 60, 68, 75, 57, 77,
                52, 64, 68, 54, 61, 79, 66, 63, 78, 76, 68, 68, 73, 52, 63, 58, 76, 72, 50, 72, 68, 57, 68, 73, 60, 65,
                55, 80, 66, 50, 69, 79, 80, 73, 75, 62, 59, 73, 65, 61, 79, 77, 60, 55, 61, 54, 76, 52, 63, 59, 60, 72,
                59, 58, 59, 53, 73, 61, 61, 76, 50, 77, 64, 77, 63, 66, 59, 74, 76, 73, 76, 70, 80, 58, 50, 66, 57, 64,
                69, 57, 54, 66, 53, 66, 72, 55, 61, 53, 70, 60, 75, 80, 71, 69, 77, 75, 79, 77, 50, 57, 60, 62, 51, 57,
                55, 71, 72, 57, 77, 62, 59, 59, 72, 74, 63, 74, 51, 78, 77, 72, 50, 66, 54, 66, 76, 76, 68, 62, 67, 66,
                78, 58, 53, 75, 67, 56, 67, 66, 73, 76, 66, 76, 72, 55, 77, 74, 65, 54, 80, 63, 52, 80, 67, 68, 55, 71,
                54, 68, 80, 68, 56, 53, 71, 59, 69, 65, 69, 71, 56, 62, 70, 58, 62, 78, 62, 71, 76, 51, 57, 54, 51, 55,
                62, 58, 71, 59, 55, 76, 79, 58, 65, 67, 55, 66, 60, 50, 58, 64, 70, 57, 69, 60, 58, 50, 57, 58, 57, 50,
                78, 79, 50, 61, 54, 72, 58, 76, 73, 67, 78, 64, 58, 76, 74, 67, 52, 65, 50, 73, 69, 67, 60, 79, 52, 62,
                55, 61, 78, 68, 54, 61, 51, 74, 71, 73, 75, 61, 71, 76, 70, 50, 71, 79, 51, 79, 70, 74, 52, 52, 70, 70,
                61, 71, 64, 68, 53, 65, 80, 65, 62, 58, 70, 64, 74, 62, 61, 80, 71, 75, 75, 58, 72, 74, 67, 78, 59, 55,
                68, 62, 74, 60, 77, 75, 57, 70, 60, 55, 70, 66, 78, 69, 71, 80, 57, 61, 56, 72, 78, 62, 65, 64, 55, 69,
                80, 61, 53, 74, 76, 68, 80, 54, 66, 75, 52, 71, 50, 54, 68, 55, 60, 80, 66, 69, 66, 77, 69, 59, 71, 63,
                80, 75, 63, 65, 55, 76, 69, 77, 72, 61, 71, 64, 73, 80, 80, 55, 63, 53, 56, 80, 63, 61, 60, 79, 77, 79,
                65, 60, 66, 65, 60, 80, 75, 76, 61, 71, 55, 55, 52, 66, 72, 67, 73, 76, 53, 77, 70, 54, 78, 75, 73, 53,
                74, 66, 61, 54, 55, 80, 68, 67, 61, 64, 55, 67, 80, 53, 57, 75, 69, 71, 67, 61, 80, 70, 62, 68, 61, 69,
                55, 70, 54, 58, 80, 65, 76, 63, 67, 68, 60, 55, 54, 75, 57, 76, 77, 71, 55, 79, 58, 80, 59, 74, 76, 74,
                53, 57, 72, 66, 75, 61, 57, 59, 54, 80, 62, 58, 58, 64, 68, 64, 55, 55, 52, 63, 51, 79, 80, 58, 63, 75,
                64, 79, 67, 76, 78, 65, 80, 77, 70, 54, 59, 51, 55, 58, 52, 58, 63, 61, 68, 76, 52, 57, 75, 58, 63, 67,
                67, 67, 80, 71, 62, 64, 64, 67, 70, 63, 66, 75, 55, 60, 67, 77, 54, 62, 69, 59, 57, 61, 52, 50, 54, 67,
                60, 78, 77, 54, 55, 70, 65, 78, 68, 62, 61, 52, 60, 76, 66, 65, 52, 64, 72, 79, 57, 64, 54, 76, 58, 74,
                75, 75, 53, 60, 50, 72, 61, 76, 75, 57, 69, 50, 73, 54, 59, 61, 74, 60, 52, 77, 67, 70, 78, 53, 66, 50,
                69, 58, 74, 59, 71, 58, 78, 68, 80, 59, 74, 75, 64, 56, 64, 60, 70, 78, 62, 59, 50, 66, 50, 76, 60, 52,
                52, 79, 59, 78, 71, 76, 57, 58, 69, 53, 75, 63, 63, 77, 80, 71, 67, 52, 75, 72, 50, 56, 79, 77, 64, 52,
                66, 79, 71, 73, 64, 71, 58, 62, 72, 79, 61, 64, 58, 78, 50, 71, 59, 51, 77, 80, 67, 68, 52, 62, 71, 51,
                62, 79, 75, 74, 57, 50, 53, 59, 50, 66, 78, 71, 60, 57, 52, 75, 70, 70, 67, 54, 62, 68, 64, 58, 62, 71,
                60, 71, 53, 80, 61, 58, 64, 76, 57, 54, 68, 70, 58, 51, 55, 60, 67, 69, 61, 79, 64, 69, 64, 51, 79, 69,
                77, 69, 62, 80, 71, 66, 68, 76, 73, 59, 57, 62, 65, 65, 59, 65, 61, 79, 78, 56, 67, 57, 61, 53, 60, 77,
                65, 70, 75, 78, 65, 79, 66, 62, 70, 54, 75, 68, 79, 65, 67, 66, 70, 79, 65, 52, 51, 63, 56, 76, 56, 51,
                54, 67, 56, 52, 77, 69, 62, 73, 50, 76, 54, 71, 79, 50, 67, 55, 60, 73, 59, 50, 65, 62, 75, 66, 65, 72,
                51, 74, 76, 52, 73, 75, 73, 63, 63, 79, 64, 58]
        expected = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
                    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
                    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
                    1000, 1000, 1000, 966, 944, 916, 896, 860, 824, 807, 773, 736, 703, 667, 628, 595, 569, 537, 503,
                    466, 434, 404, 373, 341, 299, 270, 242, 214, 174, 137, 103, 76, 40]
        self.do_test(voti, expected)

if __name__ == '__main__':
    Test.main()

